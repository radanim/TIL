{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/radanim/TIL/blob/master/Colaboratory%EC%97%90_%EC%98%A4%EC%8B%A0_%EA%B2%83%EC%9D%84_%ED%99%98%EC%98%81%ED%95%A9%EB%8B%88%EB%8B%A4.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n=10\n",
        "if n%2==0:\n",
        "  print(\"짝수\")\n",
        "elif n%2==1:\n",
        "  print(\"홀수\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IWrUrzsFbpBx",
        "outputId": "578cc468-46d3-4695-fa90-91f3d9280f2e"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "짝수\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(0x10)\n",
        "print(0b11)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YniumUeiEv1z",
        "outputId": "322f5f74-4cec-4410-f4d0-a9c00a19589f"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "16\n",
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=\"123\"\n",
        "print(a)\n",
        "b=int(a)+1\n",
        "print(b)\n",
        "c=a+1\n",
        "print(c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "id": "xxVRzz1aFaU5",
        "outputId": "b261f12b-c196-4c29-9efc-5b578e71a011"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "123\n",
            "124\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-28-5011ba514302>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"int\") to str"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=2**32\n",
        "print(a)\n",
        "b=2**64\n",
        "print(b)\n",
        "oneGiga=2**30\n",
        "print(oneGiga)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VtNyieQ5F6_z",
        "outputId": "4281b1ff-99a2-4d31-8a6d-0fdc12b2fa94"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4294967296\n",
            "18446744073709551616\n",
            "1073741824\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Seconds per one minute')\n",
        "oneM=input()\n",
        "print('Minutes per one hour')\n",
        "oneH=input()\n",
        "result=int(oneM)*int(oneH)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6lZWaaJiHLf0",
        "outputId": "edfc8cc5-06e2-4c64-c1c3-d8521726f6b1"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Seconds per one minute\n",
            "60\n",
            "Minutes per one hour\n",
            "60\n",
            "3600\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Seconds per one minute')\n",
        "oneM=input()\n",
        "print('Minutes per one hour')\n",
        "oneH=input()\n",
        "print('Hours per one day')\n",
        "oneD=input()\n",
        "seconds_per_hour=int(oneM)*int(oneH)\n",
        "seconds_per_day=int(oneM)*int(oneH)*int(oneD)\n",
        "print(seconds_per_day//seconds_per_hour)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sFA-ifnXJN7-",
        "outputId": "a33bd835-875e-49d8-d7f1-ff286fbb93f5"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Seconds per one minute\n",
            "60\n",
            "Minutes per one hour\n",
            "60\n",
            "Hours per one day\n",
            "24\n",
            "24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=30\n",
        "b=5\n",
        "c=5\n",
        "\n",
        "if (b<a) and (b==c):\n",
        "  print(\"Hello World\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HjokmqkbKk1v",
        "outputId": "7685e0fe-c6c6-4f2d-e07a-a8e332f81537"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello World\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=3\n",
        "y=3\n",
        "\n",
        "if x%y==0:\n",
        "  print(\"x%y=0\")\n",
        "  if x/y>0:\n",
        "    print(\"also x/y=\", x/y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JuHW_d7qQ86e",
        "outputId": "6e00bdad-ae24-4a70-9976-3a42b553f9b6"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x%y=0\n",
            "also x/y= 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "secret = input()\n",
        "guess = input()\n",
        "if guess < secret:\n",
        "  print('too low')\n",
        "\n",
        "elif guess > secret:\n",
        "  print('too high')\n",
        "\n",
        "else:\n",
        "  print('just right')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WwM0ujyvR_Of",
        "outputId": "23e975d7-f08f-4f08-a7cc-77460822b44f"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "5\n",
            "just right\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"input 1-10 secret number\")\n",
        "secret=int(input())\n",
        "\n",
        "print(\"input 1-10 guess number\")\n",
        "guess=int(input())\n",
        "\n",
        "if guess < secret:\n",
        "  print(\"too low\")\n",
        "elif guess > secret:\n",
        "  print(\"too high\")\n",
        "else:\n",
        "  print(\"just right\")3\n",
        "  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uFOxRzevTKI9",
        "outputId": "52ba103f-a4f1-4aff-bd1d-18d6ed8406b8"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "input 1-10 secret number\n",
            "5\n",
            "input 1-10 guess number\n",
            "3\n",
            "too low\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "small = bool(input())\n",
        "green = bool(input())\n",
        "\n",
        "if small==1 and green==0:\n",
        "  print(\"cherry\")\n",
        "elif small==1 and green==1:\n",
        "  print(\"pea\")\n",
        "elif small==0 and green==1:\n",
        "  print('watermelon')\n",
        "else:\n",
        "  print('pumpkin')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 565
        },
        "id": "ayrsyLvhTz4S",
        "outputId": "ec39240a-1cbe-4100-9385-90ba795a5c3b"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 729\u001b[0;31m                 \u001b[0mident\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin_socket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    730\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jupyter_client/session.py\u001b[0m in \u001b[0;36mrecv\u001b[0;34m(self, socket, mode, content, copy)\u001b[0m\n\u001b[1;32m    802\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 803\u001b[0;31m             \u001b[0mmsg_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_multipart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    804\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mzmq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZMQError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/zmq/sugar/socket.py\u001b[0m in \u001b[0;36mrecv_multipart\u001b[0;34m(self, flags, copy, track)\u001b[0m\n\u001b[1;32m    726\u001b[0m         \"\"\"\n\u001b[0;32m--> 727\u001b[0;31m         \u001b[0mparts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    728\u001b[0m         \u001b[0;31m# have first part already, only loop while more to receive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket._recv_copy\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/zmq/backend/cython/checkrc.pxd\u001b[0m in \u001b[0;36mzmq.backend.cython.checkrc._check_rc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: ",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-96-287326effb3e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msmall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mgreen\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0msmall\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mgreen\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"cherry\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 704\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    705\u001b[0m         )\n\u001b[1;32m    706\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    732\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    733\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 734\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    735\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "small = False\n",
        "green = False\n",
        "\n",
        "print(\"Please choose one: cherry, pea, watermelon, pumpkin\")\n",
        "veg=input()\n",
        "if veg == 'cherry':\n",
        "  small=True\n",
        "elif veg == 'pea':\n",
        "  small=True\n",
        "  green=True\n",
        "elif veg == \"watermelon\":\n",
        "  green=True\n",
        "\n",
        "print('small:'+str(small))\n",
        "print('green:'+str(green))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PulqqY2pWI3Y",
        "outputId": "a11abbd0-841e-460b-e6f6-1081456ee04f"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please choose one: cherry, pea, watermelon, pumpkin\n",
            "1\n",
            "small:False\n",
            "green:False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"0~100까지의 점수 입력\")\n",
        "score=int(input())\n",
        "if score>=91 and score <=100:\n",
        "  print(\"A\")\n",
        "elif score >=81 and score <=90:\n",
        "  print(\"B\")\n",
        "elif score >=71 and score <=80:\n",
        "  print(\"C\")\n",
        "elif score >=61 and score <=70:\n",
        "  print(\"D\")\n",
        "else:\n",
        "  print(\"F\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wMydjI5tXy23",
        "outputId": "09f6e3bf-a173-430c-9735-4a3bc9c7c664"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0~100까지의 점수 입력\n",
            "65\n",
            "D\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"please input score\")\n",
        "num=int(input())\n",
        "\n",
        "if (num>90) and (num<101):\n",
        "  print(\"GRADE:A\")\n",
        "elif num>80 & num<91:\n",
        "  print(\"GRADE:B\")\n",
        "elif num>70 & num<81:\n",
        "  print(\"GRADE:C\")\n",
        "elif num>60 & num<71:\n",
        "  print(\"GRADE:D\")\n",
        "else:\n",
        "  print(\"GRADE:E\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dkNHx5CSZ-nK",
        "outputId": "8325c956-cc6e-435b-98e7-cfae2847016f"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "please input score\n",
            "70\n",
            "GRADE:B\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(10):\n",
        "  for j in range(i+1):\n",
        "    print('*',end='')\n",
        "  print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XtNxJ0GDgMrt",
        "outputId": "cd366f50-0207-4f55-a3fd-e06dff3518a9"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "*\n",
            "**\n",
            "***\n",
            "****\n",
            "*****\n",
            "******\n",
            "*******\n",
            "********\n",
            "*********\n",
            "**********\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(9,-1,-1):\n",
        "  for j in range(i+1):\n",
        "    print('*',end='')\n",
        "  print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NmSE3KkxpYgn",
        "outputId": "2bdb06cf-eea2-4a9c-f0fb-3a97c47054f6"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "**********\n",
            "*********\n",
            "********\n",
            "*******\n",
            "******\n",
            "*****\n",
            "****\n",
            "***\n",
            "**\n",
            "*\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for x in range(0,11,1):\n",
        "  for y in range(x):\n",
        "    print(\"*\",end=\"\")\n",
        "  print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o_8ghwUCqPLV",
        "outputId": "9155b3bc-b91f-4bb2-8988-04487462ab66"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "*\n",
            "**\n",
            "***\n",
            "****\n",
            "*****\n",
            "******\n",
            "*******\n",
            "********\n",
            "*********\n",
            "**********\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for x in range(10,0,-1):\n",
        "  for y in range(x):\n",
        "    print(\"*\",end='')\n",
        "  print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qShJgxE6qd6S",
        "outputId": "7d878596-28d0-4c60-fd5b-601b58cf7b0a"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "**********\n",
            "*********\n",
            "********\n",
            "*******\n",
            "******\n",
            "*****\n",
            "****\n",
            "***\n",
            "**\n",
            "*\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(2,10):\n",
        "  for j in range(1,10):\n",
        "    print(i,'*',j,'=',i*j)\n",
        "    if j==9:\n",
        "      print('----------')\n",
        "\n",
        "  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qVOgi_5Uq9-Q",
        "outputId": "55d87db3-dbbd-4d77-e39b-93b47bd70843"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2 * 1 = 2\n",
            "2 * 2 = 4\n",
            "2 * 3 = 6\n",
            "2 * 4 = 8\n",
            "2 * 5 = 10\n",
            "2 * 6 = 12\n",
            "2 * 7 = 14\n",
            "2 * 8 = 16\n",
            "2 * 9 = 18\n",
            "----------\n",
            "3 * 1 = 3\n",
            "3 * 2 = 6\n",
            "3 * 3 = 9\n",
            "3 * 4 = 12\n",
            "3 * 5 = 15\n",
            "3 * 6 = 18\n",
            "3 * 7 = 21\n",
            "3 * 8 = 24\n",
            "3 * 9 = 27\n",
            "----------\n",
            "4 * 1 = 4\n",
            "4 * 2 = 8\n",
            "4 * 3 = 12\n",
            "4 * 4 = 16\n",
            "4 * 5 = 20\n",
            "4 * 6 = 24\n",
            "4 * 7 = 28\n",
            "4 * 8 = 32\n",
            "4 * 9 = 36\n",
            "----------\n",
            "5 * 1 = 5\n",
            "5 * 2 = 10\n",
            "5 * 3 = 15\n",
            "5 * 4 = 20\n",
            "5 * 5 = 25\n",
            "5 * 6 = 30\n",
            "5 * 7 = 35\n",
            "5 * 8 = 40\n",
            "5 * 9 = 45\n",
            "----------\n",
            "6 * 1 = 6\n",
            "6 * 2 = 12\n",
            "6 * 3 = 18\n",
            "6 * 4 = 24\n",
            "6 * 5 = 30\n",
            "6 * 6 = 36\n",
            "6 * 7 = 42\n",
            "6 * 8 = 48\n",
            "6 * 9 = 54\n",
            "----------\n",
            "7 * 1 = 7\n",
            "7 * 2 = 14\n",
            "7 * 3 = 21\n",
            "7 * 4 = 28\n",
            "7 * 5 = 35\n",
            "7 * 6 = 42\n",
            "7 * 7 = 49\n",
            "7 * 8 = 56\n",
            "7 * 9 = 63\n",
            "----------\n",
            "8 * 1 = 8\n",
            "8 * 2 = 16\n",
            "8 * 3 = 24\n",
            "8 * 4 = 32\n",
            "8 * 5 = 40\n",
            "8 * 6 = 48\n",
            "8 * 7 = 56\n",
            "8 * 8 = 64\n",
            "8 * 9 = 72\n",
            "----------\n",
            "9 * 1 = 9\n",
            "9 * 2 = 18\n",
            "9 * 3 = 27\n",
            "9 * 4 = 36\n",
            "9 * 5 = 45\n",
            "9 * 6 = 54\n",
            "9 * 7 = 63\n",
            "9 * 8 = 72\n",
            "9 * 9 = 81\n",
            "----------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for x in range(2,10,1):\n",
        "  print(x,\"단\")\n",
        "  for y in range(1,10,1):\n",
        "    print(x,\"*\",y,\"=\",x*y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XBz7JJWBBSR_",
        "outputId": "c9d74f23-1f3b-4479-971f-09440d6d020a"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2 단\n",
            "2 * 1 = 2\n",
            "2 * 2 = 4\n",
            "2 * 3 = 6\n",
            "2 * 4 = 8\n",
            "2 * 5 = 10\n",
            "2 * 6 = 12\n",
            "2 * 7 = 14\n",
            "2 * 8 = 16\n",
            "2 * 9 = 18\n",
            "3 단\n",
            "3 * 1 = 3\n",
            "3 * 2 = 6\n",
            "3 * 3 = 9\n",
            "3 * 4 = 12\n",
            "3 * 5 = 15\n",
            "3 * 6 = 18\n",
            "3 * 7 = 21\n",
            "3 * 8 = 24\n",
            "3 * 9 = 27\n",
            "4 단\n",
            "4 * 1 = 4\n",
            "4 * 2 = 8\n",
            "4 * 3 = 12\n",
            "4 * 4 = 16\n",
            "4 * 5 = 20\n",
            "4 * 6 = 24\n",
            "4 * 7 = 28\n",
            "4 * 8 = 32\n",
            "4 * 9 = 36\n",
            "5 단\n",
            "5 * 1 = 5\n",
            "5 * 2 = 10\n",
            "5 * 3 = 15\n",
            "5 * 4 = 20\n",
            "5 * 5 = 25\n",
            "5 * 6 = 30\n",
            "5 * 7 = 35\n",
            "5 * 8 = 40\n",
            "5 * 9 = 45\n",
            "6 단\n",
            "6 * 1 = 6\n",
            "6 * 2 = 12\n",
            "6 * 3 = 18\n",
            "6 * 4 = 24\n",
            "6 * 5 = 30\n",
            "6 * 6 = 36\n",
            "6 * 7 = 42\n",
            "6 * 8 = 48\n",
            "6 * 9 = 54\n",
            "7 단\n",
            "7 * 1 = 7\n",
            "7 * 2 = 14\n",
            "7 * 3 = 21\n",
            "7 * 4 = 28\n",
            "7 * 5 = 35\n",
            "7 * 6 = 42\n",
            "7 * 7 = 49\n",
            "7 * 8 = 56\n",
            "7 * 9 = 63\n",
            "8 단\n",
            "8 * 1 = 8\n",
            "8 * 2 = 16\n",
            "8 * 3 = 24\n",
            "8 * 4 = 32\n",
            "8 * 5 = 40\n",
            "8 * 6 = 48\n",
            "8 * 7 = 56\n",
            "8 * 8 = 64\n",
            "8 * 9 = 72\n",
            "9 단\n",
            "9 * 1 = 9\n",
            "9 * 2 = 18\n",
            "9 * 3 = 27\n",
            "9 * 4 = 36\n",
            "9 * 5 = 45\n",
            "9 * 6 = 54\n",
            "9 * 7 = 63\n",
            "9 * 8 = 72\n",
            "9 * 9 = 81\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "guess_me=7\n",
        "number=1\n",
        "while True:\n",
        "  if number < guess_me:\n",
        "    print(\"too low\")\n",
        "  elif number == guess_me:\n",
        "    print(\"found it!\")\n",
        "    #break\n",
        "  else:\n",
        "    print(\"Oops!\")\n",
        "    break\n",
        "  number=number+1\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s4wJViApDidV",
        "outputId": "f402ba15-33e8-4ba0-fd6a-19215d25c6ad"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "too low\n",
            "too low\n",
            "too low\n",
            "too low\n",
            "too low\n",
            "too low\n",
            "found it!\n",
            "Oops!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "guess_me=5\n",
        "for number in range(10):\n",
        "  if number < guess_me:\n",
        "    print(\"too low\")\n",
        "  elif number == guess_me:\n",
        "    print(\"found it!\")\n",
        "    #break\n",
        "  else:\n",
        "    print(\"Oops!\")\n",
        "    break\n",
        "  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rnAn1ZnhDE8_",
        "outputId": "a6d0d990-fb61-4361-f3d7-5c2ed6f87bd9"
      },
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "too low\n",
            "too low\n",
            "too low\n",
            "too low\n",
            "too low\n",
            "found it!\n",
            "Oops!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name='Henny'\n",
        "name.replace('H','P')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "gqaxLjB3GEUv",
        "outputId": "a9343b88-eb1e-45b6-9c98-7975f2fa6829"
      },
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Penny'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 167
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "empty=\"\"\n",
        "len(empty)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6nqRLzUFT3SX",
        "outputId": "86ae4df9-c1f5-46ca-d7e0-49bde9306191"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "empty=\"empty\"\n",
        "print(len(empty))\n",
        "print(empty[:4])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nui_yLLSUhRz",
        "outputId": "be1acd2b-7dc7-4f74-da9c-9fa2644116b0"
      },
      "execution_count": 172,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "empt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "empty=\"Make sure that all words are spelled correctly.\"\n",
        "print(empty.split())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gtLnfYNtUzwE",
        "outputId": "d3745da3-972f-4ce9-fb7f-a6d68087ce6a"
      },
      "execution_count": 178,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Make', 'sure', 'that', 'all', 'words', 'are', 'spelled', 'correctly.']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "song = \"\"\"When an eel grabs your arm, \n",
        "And it causes great harm,\n",
        "That's - a moray!\"\"\"\n",
        "songs=song.split()\n",
        "print(songs)\n",
        "\n",
        "for i in range(0, len(songs)):\n",
        "  if songs[i][0]=='m':\n",
        "    print(songs[i].upper())\n",
        "  else:\n",
        "    print(songs[i])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ewU39ravWOPB",
        "outputId": "cbdabc53-f160-47b8-ea8e-949194100f4e"
      },
      "execution_count": 212,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['When', 'an', 'eel', 'grabs', 'your', 'arm,', 'And', 'it', 'causes', 'great', 'harm,', \"That's\", '-', 'a', 'moray!']\n",
            "When\n",
            "an\n",
            "eel\n",
            "grabs\n",
            "your\n",
            "arm,\n",
            "And\n",
            "it\n",
            "causes\n",
            "great\n",
            "harm,\n",
            "That's\n",
            "-\n",
            "a\n",
            "MORAY!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "questions=[\n",
        "           \"We don't serve strings around here. Are you a string?\",\n",
        "           \"What is said on Father's Day in the forest?\",\n",
        "           \"What makes the sound 'Sis! Boom! Bah!'?\"\n",
        "]\n",
        "answers=[\n",
        "         \"An exploding sheep.\",\n",
        "         \"No, I'm a frayed knot.\",\n",
        "         \"'Pop!' goes the weasel.\"\n",
        "]\n",
        "\n",
        "for i in range(3):\n",
        "  print(questions[i],answers[i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2TNUQe3bbhee",
        "outputId": "d7e6a748-4f95-4d14-8fe7-42f10685f3bf"
      },
      "execution_count": 216,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "We don't serve strings around here. Are you a string? An exploding sheep.\n",
            "What is said on Father's Day in the forest? No, I'm a frayed knot.\n",
            "What makes the sound 'Sis! Boom! Bah!'? 'Pop!' goes the weasel.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "question=['age','birth','gender']\n",
        "answer=['99','1111','male']\n",
        "\n",
        "for i in range(len(question)):\n",
        "  print('Question:'+question[i])\n",
        "  print('Answer:'+answer[i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E_q6yncmjfmc",
        "outputId": "a506c0da-bca3-458a-af70-6be0a180aa63"
      },
      "execution_count": 223,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Question:age\n",
            "Answer:99\n",
            "Question:birth\n",
            "Answer:1111\n",
            "Question:gender\n",
            "Answer:male\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "strA=\"home\"\n",
        "print(\"my %s %s\" %(strA)) # 옛 스타일\n",
        "print(\"my {} {]\".format(strA)) # 새로운 스타일\n",
        "print(f\"my {strA}\") # 최신 스타일"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q20PPSLKkNbA",
        "outputId": "4e32f1e4-a368-415c-b2e3-6ac252b6a109"
      },
      "execution_count": 222,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "my home\n",
            "my home\n",
            "my home\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str1=\"roast beef\"\n",
        "str2='ham'\n",
        "str3='head'\n",
        "str4='clam'\n",
        "\n",
        "print(\"my kitty cat likes %s\" %(str1)) # 옛 스타일\n",
        "print(\"my kitty cat likes {}\". format(str2)) # 새로운 스타일\n",
        "print(f\"my kitty cat fell on his {str3} And now thinks he's a {str4}\") # 최신 스타일 "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ggYhkMHxk5ra",
        "outputId": "6b58a659-cda8-493b-d064-747abbf2f13a"
      },
      "execution_count": 232,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "my kitty cat likes roast beef\n",
            "my kitty cat likes ham\n",
            "my kitty cat fell on his head And now thinks he's a clam\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str1=\"roast beef\"\n",
        "str2='ham'\n",
        "str3='head'\n",
        "str4='clam'\n",
        "\n",
        "print(\"my kitty cat likes %s\" %(str1)) # 옛 스타일\n",
        "[print(\"my kitty cat likes {}\". format(str2)) # 새로운 스타일\n",
        "print(f\"my kitty cat fell on his {str3} And now thinks he's a {str4}\") # 최신 스타일 "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dyK-F8_tsSaW",
        "outputId": "d3846bb7-b18d-4caa-fc45-1ffa061e3144"
      },
      "execution_count": 233,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "my kitty cat likes roast beef\n",
            "my kitty cat likes ham\n",
            "my kitty cat fell on his head And now thinks he's a clam\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str1=\"Duck\"\n",
        "str2=\"Gourd\"\n",
        "str3=\"Spitz\"\n",
        "\n",
        "print(\"%sy Mc%sface\" %(str1,str1))\n",
        "print(\"%sy Mc%sface\" %(str2,str2))\n",
        "print(\"%sy Mc%sface\" %(str3,str3))\n",
        "\n",
        "print(\"{}y Mc{}face\".format(str1,str1))\n",
        "print(\"{}y Mc{}face\".format(str2,str2))\n",
        "print(\"{}y Mc{}face\".format(str3,str3))\n",
        "\n",
        "print(f\"{str1}y Mc{str1}face\")\n",
        "print(f\"{str2}y Mc{str2}face\")\n",
        "print(f\"{str3}y Mc{str3}face\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fCAwEbLksyuP",
        "outputId": "73f5ecf9-7d4f-432a-97d2-a2aa13563ac5"
      },
      "execution_count": 253,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ducky McDuckface\n",
            "Gourdy McGourdface\n",
            "Spitzy McSpitzface\n",
            "Ducky McDuckface\n",
            "Gourdy McGourdface\n",
            "Spitzy McSpitzface\n",
            "Ducky McDuckface\n",
            "Gourdy McGourdface\n",
            "Spitzy McSpitzface\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "list_example=['apple','banana','cherry','kiwi','melon','mango']\n",
        "list_example[1:3]=\"orange\",\"watermelon\"\n",
        "print(list_example)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TA7dT6JGvpoK",
        "outputId": "8d080a13-a240-4979-9e79-7e8d232c7747"
      },
      "execution_count": 255,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['apple', 'orange', 'watermelon', 'kiwi', 'melon', 'mango']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data=[-12,3,-9,5,8,-2,0,-8,3,10]\n",
        "\n",
        "m=data[0]\n",
        "for i in range(1,len(data)):\n",
        "  if m<data[i]:\n",
        "    m=data[i]\n",
        "print(data[i])\n",
        "\n",
        "i=1\n",
        "sum=0\n",
        "print(len(data))\n",
        "while i<len(data):\n",
        "  sum+=data[i]\n",
        "  i+=2\n",
        "print(sum)\n",
        "print(sum/5)\n",
        "\n",
        "data.sort(reverse=True)\n",
        "print(data)\n",
        "data.insert(3,100)\n",
        "print(data)\n",
        "data.remove(-12)\n",
        "print(data)"
      ],
      "metadata": {
        "id": "6Mpe_ISLzBye",
        "outputId": "3bd0e42c-8380-46f2-e8c8-8abe168682ea",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 292,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "10\n",
            "8\n",
            "1.6\n",
            "[10, 8, 5, 3, 3, 0, -2, -8, -9, -12]\n",
            "[10, 8, 5, 100, 3, 3, 0, -2, -8, -9, -12]\n",
            "[10, 8, 5, 100, 3, 3, 0, -2, -8, -9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data=[-12,3,-9,5,8,-2,0,-8,3,10]\n",
        "\n",
        "for i in data:\n",
        "  if i == max(data):\n",
        "    print(\"max:\",i)\n"
      ],
      "metadata": {
        "id": "VC7e5d0E6MxY",
        "outputId": "a498c0bf-4c59-4a0f-a8eb-033a80bf8abf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 305,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "max: 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data=[-12,3,-9,5,8,-2,0,-8,3,10]\n",
        "\n",
        "i=0\n",
        "result=0\n",
        "\n",
        "while i<len(data):\n",
        "  if i%2==1:\n",
        "    result += data[i]\n",
        "  i+=1\n",
        "\n",
        "print(i)\n",
        "avg=result/(len(data)/2)\n",
        "print(f\"sum={result}, avg={avg}\")"
      ],
      "metadata": {
        "id": "KHO-yI7183OT",
        "outputId": "35d5d221-568c-4d52-ab7f-abad8fc0e0ba",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 309,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "sum=8, avg=1.6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_list=[]\n",
        "sum=0\n",
        "\n",
        "for i in range(5):\n",
        "  i = int(input(\"Please input integer: \"))\n",
        "  my_list.append(i)\n",
        "  sum +=i\n",
        "print(my_list)\n",
        "avg = sum/len(my_list)\n",
        "print(avg)"
      ],
      "metadata": {
        "id": "q6vE8I7v-OfA",
        "outputId": "eac20ba2-d494-41e3-9a9d-5721293e466d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 310,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please input integer: 3\n",
            "Please input integer: 19\n",
            "Please input integer: 50\n",
            "Please input integer: 20\n",
            "Please input integer: 40\n",
            "[3, 19, 50, 20, 40]\n",
            "26.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "3vmdm1RE_GoA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "cFEdZJS891jc"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Colaboratory에 오신 것을 환영합니다",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
